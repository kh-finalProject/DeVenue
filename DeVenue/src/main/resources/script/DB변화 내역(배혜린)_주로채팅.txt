--기존 테이블 삭제
DROP TABLE "CHAT";
DROP TABLE "MESSAGE";
DROP TABLE "CHATROOM";

--다시 테이블 만들기
CREATE TABLE "CHAT" (
	"CHAT_ID"	NUMBER		NOT NULL,
	"FROM_ID"	NUMBER		NOT NULL,
	"TO_ID"	NUMBER		NOT NULL,
	"ROOM_ID"	NUMBER		NOT NULL,
	"CHAT_STATUS"	VARCHAR2(3)	DEFAULT 'Y'	NULL
);

COMMENT ON COLUMN "CHAT"."CHAT_ID" IS '채팅 기본키';

COMMENT ON COLUMN "CHAT"."FROM_ID" IS '발신자, 회원테이블의 기본키';

COMMENT ON COLUMN "CHAT"."TO_ID" IS '수신자, 회원테이블의 기본키';

COMMENT ON COLUMN "CHAT"."ROOM_ID" IS '채팅방 테이블 기본키';

COMMENT ON COLUMN "CHAT"."CHAT_STATUS" IS '대화상대가 없어지거나 채팅방이 존재하지 않으면 N';


CREATE TABLE "MESSAGE" (
	"MESSAGE_ID"	NUMBER		NOT NULL,
	"ROOM_ID"	NUMBER		NOT NULL,
	"FROM_ID"	NUMBER		NULL,
	"CHAT_CONTENT"	VARCHAR2(4000)		NULL,
	"ORIGIN_FILENAME"	VARCHAR2(4000)		NULL,
	"RENAME_FILENAME"	VARCHAR(255)		NULL,
	"READ"	VARCHAR2(3)	DEFAULT 'N'	NULL,
	"MSG_CREATE_DATE"	TIMESTAMP DEFAULT SYSDATE	NULL
);

COMMENT ON COLUMN "MESSAGE"."MESSAGE_ID" IS '메시지 기본키';

COMMENT ON COLUMN "MESSAGE"."ROOM_ID" IS '채팅방 기본키';

COMMENT ON COLUMN "MESSAGE"."FROM_ID" IS '보낸사람 회원번호';

COMMENT ON COLUMN "MESSAGE"."CHAT_CONTENT" IS '채팅 내용';

COMMENT ON COLUMN "MESSAGE"."ORIGIN_FILENAME" IS '채팅에서 보낸 파일의 원본이름';

COMMENT ON COLUMN "MESSAGE"."RENAME_FILENAME" IS '채팅에서 보낸 파일의 재생성된 이름';

COMMENT ON COLUMN "MESSAGE"."READ" IS '읽은 메시지인지 여부 CHECK제약조건 Y/N';

COMMENT ON COLUMN "MESSAGE"."MSG_CREAET_DATE" IS '보낸 시간';



CREATE TABLE "CHATROOM" (
	"ROOM_ID"	NUMBER		NOT NULL,
	"ROOM_NAME"	VARCHAR2(4000)		NULL,
	"ROOM_STATUS"	VARCHAR2(3)	DEFAULT 'Y'	NULL
);

COMMENT ON COLUMN "CHATROOM"."ROOM_ID" IS '채팅방 기본키';

COMMENT ON COLUMN "CHATROOM"."ROOM_NAME" IS '채팅방 이름';

COMMENT ON COLUMN "CHATROOM"."ROOM_STATUS" IS '채팅방 나가기 여부';

--기본키
ALTER TABLE "CHAT" ADD CONSTRAINT "PK_CHAT" PRIMARY KEY (
	"CHAT_ID"
);

ALTER TABLE "MESSAGE" ADD CONSTRAINT "PK_MESSAGE" PRIMARY KEY (
	"MESSAGE_ID"
);
ALTER TABLE "CHATROOM" ADD CONSTRAINT "PK_CHATROOM" PRIMARY KEY (
	"ROOM_ID"
);

--외래키
ALTER TABLE "CHAT" ADD CONSTRAINT "FK_MEMBER_TO_CHAT_1" FOREIGN KEY (
	"FROM_ID"
)
REFERENCES "MEMBER" (
	"MEM_ID"
);

ALTER TABLE "CHAT" ADD CONSTRAINT "FK_MEMBER_TO_CHAT_2" FOREIGN KEY (
	"TO_ID"
)
REFERENCES "MEMBER" (
	"MEM_ID"
);

ALTER TABLE "CHAT" ADD CONSTRAINT "FK_CHATROOM_TO_CHAT_1" FOREIGN KEY (
	"ROOM_ID"
)
REFERENCES "CHATROOM" (
	"ROOM_ID"
);

ALTER TABLE "MESSAGE" ADD CONSTRAINT "FK_CHATROOM_TO_MESSAGE_1" FOREIGN KEY (
	"ROOM_ID"
)
REFERENCES "CHATROOM" (
	"ROOM_ID"
);

-- 회원 채팅 설정 테이블 생성
CREATE TABLE "MEM_CHATSET" (
	"MEM_ID"	NUMBER		NOT NULL,
	"IS_TRANS_CHAT"	VARCHAR2(3)	DEFAULT 'Y'	NULL,
	"IS_SHOWPASTCHAT"	VARCHAR2(3)	DEFAULT 'N'	NULL
);

COMMENT ON COLUMN "MEM_CHATSET"."MEM_ID" IS '회원 기본키';

COMMENT ON COLUMN "MEM_CHATSET"."IS_TRANS_CHAT" IS '번역 표시 여부';

COMMENT ON COLUMN "MEM_CHATSET"."IS_SHOWPASTCHAT" IS '종료된 메시지 표시여부';

ALTER TABLE "MEM_CHATSET" ADD CONSTRAINT "PK_MEM_CHATSET" PRIMARY KEY (
	"MEM_ID"
);

ALTER TABLE "MEM_CHATSET" ADD CONSTRAINT "FK_MEMBER_TO_MEM_CHATSET_1" FOREIGN KEY (
	"MEM_ID"
)
REFERENCES "MEMBER" (
	"MEM_ID"
);

-- MEMBER 테이블 PHONE, CELLPHONE 컬럼은 구분자를 넣어줘야해서 자료형 수정
ALTER TABLE MEMBER MODIFY PHONE VARCHAR2(100);
ALTER TABLE MEMBER MODIFY CELLPHONE VARCHAR2(100);

--SIGNATURE 테이블 컬럼 2개 추가, 체크 제약조건 추가(서명인지 도장인지 구분), 주사용 날인인지 아닌지 구분
ALTER TABLE SIGNATURE ADD SIG_TYPE VARCHAR(100) NULL;
ALTER TABLE SIGNATURE ADD CONSTRAINT SIG_TYPE CHECK(SIG_TYPE IN('SIGN', 'STAMP'));
ALTER TABLE SIGNATURE ADD IS_MAIN VARCHAR(100) NULL;
ALTER TABLE SIGNATURE ADD CONSTRAINT IS_MAIN CHECK(IS_MAIN IN('Y', 'N'));

-- 뷰 추가
-- 1.관리자 채팅목록에서 필요한 리스트 항목에 맞춰 모든 채팅방에 대한 데이터 가져오기
DROP VIEW CHATLIST;
CREATE OR REPLACE VIEW CHATLIST AS
SELECT CR.ROOM_ID, ROOM_NAME, FROM_ID, TO_ID, MEM_ID, PROFILE_IMG,  CHAT_CONTENT, UNREADCOUNT, MSG_CREATE_DATE
FROM CHATROOM CR
LEFT JOIN (SELECT ROOM_ID, CHAT_CONTENT, MSG_CREATE_DATE 
                FROM MESSAGE
                WHERE (ROOM_ID, MSG_CREATE_DATE) IN (SELECT ROOM_ID, MAX(MSG_CREATE_DATE) MCD 
                                                                                    FROM MESSAGE GROUP BY ROOM_ID)
                ) MSG ON (CR.ROOM_ID = MSG.ROOM_ID)
LEFT JOIN (SELECT ROOM_ID, COUNT(*) UNREADCOUNT
            FROM MESSAGE
            WHERE READ = 'N' AND FROM_ID NOT IN (1,2)
            GROUP BY ROOM_ID) MC ON (CR.ROOM_ID = MC.ROOM_ID)
LEFT JOIN CHAT C ON (CR.ROOM_ID = C.ROOM_ID)
LEFT JOIN (SELECT MEM_ID, PROFILE_IMG FROM PROFILE) P ON (C.FROM_ID = P.MEM_ID)
ORDER BY ROOM_ID DESC;

-- 2.채팅용 유저 정보 뷰
DROP VIEW CHATUSER;
CREATE VIEW CHATUSER AS
SELECT MEM_ID, USER_TYPE, UT_NAME, MEM_EMAIL, MEM_NICK, MEM_NAME, IS_ADVERTISE, PROFILE_IMG
FROM MEMBER
LEFT JOIN PROFILE USING(MEM_ID)
LEFT JOIN USERTYPE ON(USER_TYPE = UT_CODE)
WHERE MEM_STATUS = 'Y'
ORDER BY MEM_ID;

-- 3.채팅 유저 정보 뷰(사람)
DROP VIEW CHATUSER_INFO;
CREATE VIEW CHATUSER_INFO AS
SELECT MEM_ID, USER_TYPE, UT_NAME, MEM_TYPE, MEM_TYPE_KIND, MEM_NICK, MEM_NAME, MEM_EMAIL, PHONE, CELLPHONE, MEM_TYPE_NAME, PROFILE_IMG
FROM MEMBER
LEFT JOIN USERTYPE ON (USER_TYPE = UT_CODE)
LEFT JOIN MEMTYPE ON (MEM_TYPE = MEM_TYPE_CODE)
LEFT JOIN PROFILE USING(MEM_ID);
--WHERE MEM_ID = 3;

-- 4.채팅 유저 채팅 정보 뷰 (채팅관련)
DROP VIEW EACHCHAT_INFO;
CREATE VIEW EACHCHAT_INFO AS
SELECT ROOM_ID, ROOM_NAME, C.FROM_ID CLIENT_ID,  TO_ID REL_ADMIN_ID, M.FROM_ID MSG_FROM_ID, CHAT_CONTENT, ORIGIN_FILENAME, RENAME_FILENAME, READ, MSG_CREATE_DATE
FROM CHATROOM
LEFT JOIN CHAT C USING (ROOM_ID)
LEFT JOIN MESSAGE M USING (ROOM_ID)
--WHERE ROOM_ID = 1
ORDER BY MSG_CREATE_DATE
;
-- 5.채팅 유저 프로젝트 정보 뷰(프로젝트)
-- 회원 정보 뷰(프로젝트)
DROP VIEW PRO_INFO;
CREATE VIEW PRO_INFO AS
SELECT PRO_ID, P.MEM_ID CLIENT_ID, PM.MEM_ID PARTNERS_ID, PRO_NAME, PRO_STA_ID, PRO_STA_NAME, PRO_SUMMARY, PRO_START_DATE, PRO_END_DATE, PRO_DURATION, PRO_WORKPLACE, PRO_PAYMENT
FROM PROJECT P
LEFT JOIN P_STATUS PS USING(PRO_STA_ID)
LEFT JOIN P_MATCH PM ON(P.PRO_ID=PM.PRO_PID)
--WHERE P.MEM_ID = 3 OR PM.MEM_ID = 3
ORDER BY PRO_ID;
